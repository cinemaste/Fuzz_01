file_list = [   "tables.doc",
    "size.doc",
    "Mulo_e.doc",
    "rETI.doc",
    "aNALYST.doc",
    "aNALYST2.doc"]

apps = "%ProgramFiles%\\Windows NT\\Accessories\\wordpad.exe"

fuzz_output = "fuzz.doc"

FuzzFactor = 250
num_tests = 1000

import math
import random
import string
import subprocess
import time

for i in xrange(num_tests):
    file_choice = random.choice(file_list)
    app = random.choice(apps)
    buf = bytearray(open(file_choice, 'rb').read())
    
    # start Charlie Miller code (modified)
    numwrites = random.randrange(math.ceil(((float(len(buf)))/FuzzFactor)))+1
    fuzz_choice = random.choice(['start', 'end', 'middle', 'random'])
    begin = None
    if fuzz_choice == 'start': begin = 0
    if fuzz_choice == 'end': begin = len(buf)-numwrites-1
    if fuzz_choice == 'middle': begin = random.randrange(len(buf)-numwrites)
    for j in xrange(numwrites):
        rbyte = random.randrange(256)
        if begin is None:
            rn = random.randrange(len(buf))
        else:
            rn = begin
            begin += 1
        buf[rn] = "%c"%(rbyte)
    # end Charlie Miller code (modified)

    open(fuzz_output, 'wb').write(buf)

    print "Using app: %s orig_file: %s fuzz_type: %s #writes=%d" % (app, file_choice, fuzz_choice, numwrites)
    process = subprocess.Popen([app, fuzz_output])
    
    time.sleep(1)
    crashed = process.poll()
    if not crashed:
        process.terminate()n = random.choice(file_extension)
    global fuzz_output
    fuzz_output="fuzz"+extension
    rfile = str(random.randint(1,3))+extension
    return location+rfile

start_time = time.time() 



for i in range(num_tests):    
    file_choice = random_file()        
    buf = bytearray(open(file_choice,'rb').read())    
    numwrites = random.randrange(math.ceil((float(len(buf))/FuzzFactor)))+ 1
    
    for j in range(numwrites):
        rbyte = random.randrange(256)
        rn = random.randrange(len(buf))
        buf[rn] = "%c"%(rbyte)
        

        
    open(fuzz_output, 'wb').write(buf)
    process = subprocess.Popen([app,fuzz_output])
    
    time.sleep(1)
    crashed = process.poll()
    if crashed :
        num_crashed+=1
        print "Number of crashes:",num_crashed
        print "number of writes:", numwrites
        print "return code:", process.returncode
        print 
    else: 
        process.terminate()
        
end_time = (time.time()-start_time)         
print "Number of crashes is",num_crashed  
print "Time taken to complete %d iterations is %f s" % (num_tests, end_time)